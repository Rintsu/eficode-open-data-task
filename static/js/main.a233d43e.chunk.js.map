{"version":3,"sources":["BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","width","height","options","title","display","displayTitle","text","concat","date","fontSize","legend","displayLegend","position","legendPosition","maintainAspectRatio","Component","defaultProps","App","that","$","ajax","beforeSend","request","setRequestHeader","dataType","url","success","console","log","setState","labels","keys","datasets","label","values","backgroundColor","getData","src_BarChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAIMA,sBACL,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,UAAWT,EAAMS,WAHDR,wEAcjB,OACCS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACCC,KAAMX,KAAKJ,MAAMS,UACjBO,MAAO,IACPC,OAAQ,GACRC,QAAS,CACRC,MAAM,CACLC,QAAQhB,KAAKJ,MAAMqB,aACnBC,KAAI,qCAAAC,OAAuCnB,KAAKJ,MAAMwB,MACtDC,SAAS,IAEVC,OAAO,CACNN,QAAQhB,KAAKJ,MAAM2B,cACnBC,SAASxB,KAAKJ,MAAM6B,gBAErBC,qBAAqB,aA/BJC,cAAjBhC,EAQEiC,aAAe,CACrBX,cAAa,EACbM,eAAc,EACdE,eAAe,OA4BF9B,QCeAkC,cApDd,SAAAA,EAAYjC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,UAAW,GACXe,KAAK,IAJWvB,uEAQViC,GACPC,IAAEC,KAAK,CACNC,WAAW,SAASC,GACnBA,EAAQC,iBAAiB,gBAAiB,2JAE3CC,SAAU,OACVC,IAAK,8CACLC,QAAU,SAAS3B,GAClB4B,QAAQC,IAAI7B,GACZmB,EAAKW,SAAS,CACbrB,KAAMT,EAAKS,KACXf,UAAU,CACTqC,OAAQ5C,OAAO6C,KAAKhC,SAAaA,EAAKS,MACtCwB,SAAU,CACT,CACCC,MAAM,kBACNlC,KAAMb,OAAOgD,OAAOnC,GACpBoC,gBAAiB,CAChB,0BACA,0BACA,0BACA,+EAWP/C,KAAKgD,QAAQhD,uCAIX,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAACyC,EAAD,CAAU5C,UAAWL,KAAKI,MAAMC,UAAWe,KAAMpB,KAAKI,MAAMgB,eA/C9CO,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a233d43e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\n\r\nclass BarChart extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tchartData: props.chartData\r\n\t\t}\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\tdisplayTitle:true,\r\n\t\tdisplayLegend:false,\r\n\t\tlegendPosition:'top'\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"chart\">\r\n\t\t\t\t<Bar\r\n\t\t\t\t\tdata={this.props.chartData}\r\n\t\t\t\t\twidth={150}\r\n\t\t\t\t\theight={50}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttitle:{\r\n\t\t\t\t\t\t\tdisplay:this.props.displayTitle,\r\n\t\t\t\t\t\t\ttext: `Latest weather sensor readings \\n ${this.props.date}`,\r\n\t\t\t\t\t\t\tfontSize:25\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend:{\r\n\t\t\t\t\t\t\tdisplay:this.props.displayLegend,\r\n\t\t\t\t\t\t\tposition:this.props.legendPosition\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tmaintainAspectRatio: true\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default BarChart;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport $ from 'jquery';\nimport BarChart from './BarChart.js';\n\nclass App extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tchartData: {},\n\t\t\tdate:''\n\t\t}\n\t}\n\n\tgetData(that) {\n\t\t$.ajax({\n\t\t\tbeforeSend:function(request){\n\t\t\t\trequest.setRequestHeader(\"Authorization\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjMwLCJlbWFpbCI6InRlc3RtYWlsIiwiaWF0IjoxNTUxNjk2MzY0fQ.ewPllH3Z9sAFnnpLXMZd83h_Y102kt8suThU9-jqWks\");\n\t\t\t},\n\t\t\tdataType: \"json\",\n\t\t\turl: \"https://opendata.hopefully.works/api/events\",\n\t\t\tsuccess: (function(data){\n\t\t\t\tconsole.log(data);\n\t\t\t\tthat.setState({\n\t\t\t\t\tdate: data.date,\n\t\t\t\t\tchartData:{\n\t\t\t\t\t\tlabels: Object.keys(data, delete data.date),\n\t\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel:'Latest Readings',\n\t\t\t\t\t\t\t\tdata: Object.values(data),\n\t\t\t\t\t\t\t\tbackgroundColor: [\n\t\t\t\t\t\t\t\t\t'rgba(255, 99, 132, 0.6)',\n\t\t\t\t\t\t\t\t\t'rgba(54, 162, 235, 0.6)',\n\t\t\t\t\t\t\t\t\t'rgba(255, 206, 86, 0.6)',\n\t\t\t\t\t\t\t\t\t'rgba(75, 192, 192, 0.6)'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t})\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getData(this)\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n\t\t\t\t<BarChart chartData={this.state.chartData} date={this.state.date}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}